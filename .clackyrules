### Startup Command:

bin/dev (Do not use `rails s` directly, as it may cause js/css loading issues)

### The project uses the following tech stack:

Ruby on Rails 7.2
Tailwind v3
Figaro
PostgreSQL
Active_Storage for upload file
Kaminari
FriendlyId (for SEO-friendly URLs)
Puma
RSpec
Stimulus
Turbo (Drive enabled, full SPA experience)
ActionCable( solid_queue, no redis )

Do not add or remove any components and avoid upgrading or downgrading components.

Use simple, clear language and avoid technical jargon to user.

## What time you should run/stop project

When project has been setup, call `run_project` tool immediately. ALWAYS keep project running.

Restarting project is unnecessary because Rails automatically hot-reloads code changes in most cases. Changes to the following explicitly require a restart:
- `config/` directory files (except `config/routes.rb`)
- `Gemfile` or `Gemfile.lock`
- `config/application.yml`

## ‚ö†Ô∏è MANDATORY PROJECT WORKFLOW - FOLLOW EXACTLY IN THIS ORDER

**STOP! Before creating ANY models or controllers, you MUST complete these steps first:**

### Step 1: REQUIRED - Design System First
**ALWAYS start by updating existing design system variables in `app/assets/stylesheets/application.css`** (using `npm run build:css` to keep it right). DO NOT create any models/controllers before this.

**‚ö†Ô∏è MODIFICATION HIERARCHY - FOLLOW EXACTLY:**
1. **FIRST**: Modify existing CSS variables in `:root` section
2. **SECOND**: Adjust existing dark mode variables in `.dark` section
3. **LAST RESORT**: Only if absolutely necessary, modify existing component classes (.btn, .card, .alert, etc.)

**ALWAYS use HSL colors in application.css and tailwind.config.js**

If there are rgb colors in index.css, make sure to not use them in tailwind.config.js wrapped in hsl functions as this will create wrong colors

CRITICAL: USE SEMANTIC TOKENS FOR COLORS, GRADIENTS, FONTS, ETC. It's important you follow best practices. DO NOT use direct colors like text-white, text-black, bg-white, bg-black, etc. Everything must be themed via the design system defined in the `application.css` and `tailwind.config.js` files!

**NEVER use `@apply group` in CSS** - `group` class should only be added in HTML templates, not in CSS @apply directives.

**USE EXISTING COMPONENTS**: The system has complete .btn-*, .card-*, .alert-*, .badge-*, .form-* classes. Use these instead of creating new ones.

Pay attention to contrast, color, and typography.

### Step 2: REQUIRED - Develop demo view based Design System and user requirements
Develop a demo view based on the new design system and user requirements, allowing users to quickly see a UI effect. The view should be located at `app/views/shared/demo.html.erb` (Only write body content, The system has already completed route configuration - when there's no home/index.html.erb, the homepage will automatically render this view)

**IMPORTANT**: Once you create `app/views/home/index.html.erb` or any real homepage, you MUST delete `app/views/shared/demo.html.erb` immediately. Demo is only for early development preview and contains fake data that should not be used in production features.

### Step 3: REQUIRED - Testing visit '/'
**ALWAYS run the project, then use `curl http://localhost:3000/` to ensure these is no error**

### Step 4: Then proceed with other features
Only after completing Steps 1-3, you can create other models and controllers.

### Step 5: MANDATORY - Before Task Completion
**CRITICAL: Run `rake test` and ensure ALL tests pass before delivering any feature**
- This is NON-NEGOTIABLE - never deliver with failing tests
- Run multiple times until all tests pass (see Testing Requirements section)
- **If you are planning tasks with TodoWrite tool, ALWAYS include "Run rake test and ensure all tests pass" as a specific task item**


## Some important tips when Developing user authentication/payment/LLM-calling(AI APP) system

when developing order/payment system, don't write it yourself. Use `rails generate stripe_pay` to generate the initial code.

**IMPORTANT for stripe_pay:** Before running `rails generate stripe_pay`, ensure NO Order model exists. The generator will create the Order model, migration, user-side order pages and admin crud pages. If Order model already exists, remove it first to avoid conflicts.

Should only need to support Stripe payments by default.

**LLM Integration:** Use `rails generate llm` to generate LLM service infrastructure. Always prefer streaming via ActionCable - use `LlmStreamJob.perform_later(channel_name:, prompt:, system:)` for real-time streaming responses. Auto-configures LLM_BASE_URL, LLM_API_KEY, LLM_MODEL in application.yml. When storing LLM messages, include `LlmMessageValidationConcern` - don't validate role & content yourself.

Do not recreate administrator functionality in User model. Administrator system already exists. Adding admin page low priority.


## Some important tips when coding

**CRITICAL: Demo File Management**
- `app/views/shared/demo.html.erb` is ONLY for early development preview with fake data
- Once ANY real homepage exists (like `app/views/home/index.html.erb`), you MUST delete demo.html.erb
- NEVER reference or link to demo.html.erb in production features
- Demo serves as temporary placeholder until real pages are developed

Do not generate any fake data that should originally be in the database for users.

Do not write any business logic in the admin backend that should only be for website management and maintenance.

Create new home page, please write it in `app/views/home/index.html.erb` if need.

Generate images using this placeholder website: https://images.unsplash.com/ and simultaneously verify accessibility with `curl` if you need static assets.

Use Unsplash images instead of self-generated icons if you need placeholder images with ActiveStorage.

When installing any new gem or npm packages, always specify a version you are most familiar with and suitable for the project. Do not use the latest version directly.

**ALWAYS prefer `rails generate models` for batch model generation:**
- Syntax: `rails g models product name:string:default=Untitled price:decimal:default=0 + category name:string + tag name:string color:string:default=#000000`
- Separator: `+` splits different models
- Enhanced syntax support:
  - **Default values**: `field:type:default=value` (e.g., `status:string:default=draft`, `count:integer:default=0`)
  - **Null constraints**: `field:type:null` (generates `null: false` in migration)
  - **Serialize**: `field:text:serialize` (only for text/string; json/jsonb auto-handled)
- **Protected names**: Cannot use `user`, `order`, `payment`, etc. (suggests alternatives)
- Options: `--skip-migration`, `--skip-factory`, `--skip-spec`

Use `rails generate model xxx` only when generating a single model (supports same enhanced syntax as above).

Use `rails generate service xxx` to generate a service file, not generate by yourself.

Use `rails generate admin_crud xxx` (where xxx is your model name that you created before) to create the initial CRUD when developing the admin management page, modify generated code for free.

Use `rails generate controller xxx [action1] [action2] [--auth] [--single]` (where xxx is your controller name, action is optional(all actions by default), --auth means need authenticate_user!, --single generates singular resource without index action) to create controllers when developing the user-side functionality, modify generated code for free.

Use `rails generate channel xxx [action1] [action2] [--auth]` to create ActionCable channels, --auth means need current_user and authenticate_user!

Use `rails generate pwa` to generate Progressive Web App setup with manifest, service worker, and install controller. Auto-detects app name from ENV['APPNAME'] and theme color from application.css --color-primary.

Use `rails generate stimulus_controller xxx` to create new Stimulus controller. Forms are handled automatically by Turbo Drive.

**STIMULUS TARGET RULES**: Optional targets must be declared with `declare readonly hasXXXTarget: boolean` to bypass validation. Required targets without this declaration will be validated.

**‚ö†Ô∏è STIMULUS TESTING - CRITICAL COMPLIANCE**:
- ALWAYS run `bundle exec rspec spec/javascript/simple_stimulus_validator_spec.rb` after ANY Stimulus-related changes
- ALL stimulus validator errors are REAL errors, NOT false positives - fix them immediately
- NEVER dismiss or ignore stimulus validator failures as "misleading" or "incorrect"
- These tests validate critical controller-view integration - failures mean broken functionality

Use FriendlyId (already configured) if need slug URLs. For user-facing content use `friendly_id :title, use: :slugged`, for admin/API use simple IDs.

## üéØ FRONTEND DEVELOPMENT RULES - STIMULUS + TURBO + TYPESCRIPT

**MANDATORY**: ALL frontend interactions MUST use Stimulus controllers. NO inline JavaScript allowed.

**CRITICAL**:
- ‚ùå NEVER use Rails-UJS syntax (`remote: true`, `method: :delete`, `data-method`, `data-confirm`, `data-disable-with`)
- ‚ùå NEVER use `fetch()` in Stimulus controllers - use form submission instead
- ‚úÖ Use Turbo instead: Turbo Drive, Frames, and Streams are available
- ‚úÖ Prefer `format.turbo_stream` for server responses
- ‚úÖ Real-time: Use `broadcast_*_to` in ActionCable
- ‚úÖ For AJAX-like updates: Use `form.requestSubmit()` to trigger Turbo Stream responses

ALWAYS prefer TailwindCSS v3 and Stimulus controllers for UI behavior. NO pure JavaScript or jQuery allowed.

Every form should include error messages using the shared partial. Add `<%= render 'shared/form_error_message', model: @your_model %>` at the beginning of every form for consistent error display. Never write nested form.


## Testing Requirements

**MANDATORY**: Keep `rake test` all passed Before delivery feature to users.

`rake test` is configured to only show 3 failed test cases at a time, so you should repeatedly run rake test (no less than 3 rounds, no more than 10 rounds) until all tests pass

**CRITICAL**: Double check `rake test` all passed at last when you finish the task.

For authenticated curl: `rails dev:token[test@example.com]` outputs the token and example curl command (will create user if not exists). Copy the token and use it:
```bash
curl -H 'Authorization: Bearer <token>' http://localhost:3000/your_endpoint
```

Do not use `rails console`, use `rails runner` instead if you want insert or check db data.

Use `bundle exec rspec spec/requests/xxx_spec.rb --format documentation`( not -v or --version ) for single test.

**When you see "Views for xxx are not yet developed" error during testing, immediately create the corresponding view file, then re-run the tests.**

Temporary files should be written in the `tmp` directory.

## Debugging Frontend Errors

**Frontend Error Report Protocol:**
1. **Read logs FIRST** - Don't guess, check Run project output and stack traces
2. **Identify root cause** - What action triggered it? What's the actual error?
3. **Minimal fix** - Fix only what's broken based on logs
4. **Test** - Verify the exact scenario that failed

## Code Quality

**FAIL FAST PRINCIPLE:**
- NEVER use default values to hide missing required data
- Let functions return `nil` or raise errors when data is missing
- Validate inputs early and explicitly
- Avoid "silent failures" that mask bugs

**CODE COMMENTS:**
- Minimal comments, focus on self-documenting code
- English only, explain WHY not WHAT
- No obvious comments that repeat the code

## Some files never edit

Never edit `application.html.erb`, update `app/views/shared/_navbar.html.erb` instead if need add navbar.

Never edit `admin/base_controller.rb`
