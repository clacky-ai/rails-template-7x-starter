Description:
    Generate a complete frontend CRUD interface for an existing model with beautiful daisyUI styling (FULL VERSION).
    This generator automatically detects model fields and creates controller, views, and updates 
    routes. Unlike admin_crud, this generates controllers that inherit from ApplicationController
    for frontend use.

    IMPORTANT: The model must already exist before using this generator.

Example:
    bin/rails generate crud_full Product

    This will create:
        Controller:  app/controllers/products_controller.rb
        Views:       app/views/products/index.html.erb
                     app/views/products/show.html.erb
                     app/views/products/new.html.erb
                     app/views/products/edit.html.erb
        Routes:      Updates config/routes.rb

    bin/rails generate crud_full Product index show

    This will create only index and show actions:
        Controller:  app/controllers/products_controller.rb (with only index and show actions)
        Views:       app/views/products/index.html.erb
                     app/views/products/show.html.erb
        Routes:      Updates config/routes.rb with only: [:index, :show]

Prerequisites:
    The model must exist before running this generator. If the model doesn't exist, 
    you'll see an error message with instructions to create it first.

    Example:
    bin/rails generate model Product name:string description:text price:decimal active:boolean
    bin/rails db:migrate
    bin/rails generate crud_full Product

Actions:
    If no actions are specified, all CRUD actions will be generated: index, show, new, edit
    If actions are specified, only those actions (and their dependencies) will be generated:
    - index: Lists all records
    - show: Shows a single record
    - new: Creates new records (includes create action)
    - edit: Edits records (includes update and destroy actions)

Features:
    - Automatically detects all model fields (except id, created_at, updated_at)
    - Generates appropriate form fields based on column types
    - Creates responsive tables with pagination support (Kaminari)
    - Includes proper validation error handling
    - Follows daisyUI design patterns
    - Inherits from ApplicationController for frontend use

Supported field types:
    string, text, integer, decimal, float, boolean, date, datetime, timestamp, time

Model Requirements:
    - Model must inherit from ApplicationRecord
    - Model file should be in app/models/
    - Database table should exist (run migrations)

Examples:
    # For existing User model - all actions
    bin/rails generate crud_full User

    # For existing Article model - only index and show
    bin/rails generate crud_full Article index show

    # For existing Category model - only new and edit
    bin/rails generate crud_full Category new edit

    # For existing Post model - only index
    bin/rails generate crud_full Post index
