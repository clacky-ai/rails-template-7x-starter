class AuthenticationGenerator < Rails::Generators::Base
  include Rails::Generators::Migration
  source_root File.expand_path('templates', __dir__)

  desc "Generate a complete authentication system with users and sessions"

  def create_models
    say "Creating models...", :green

    # User model
    copy_file 'models/user.rb', 'app/models/user.rb'

    # Session model
    copy_file 'models/session.rb', 'app/models/session.rb'

    # Current model
    copy_file 'models/current.rb', 'app/models/current.rb'
  end

  def create_controllers
    say "Creating controllers...", :green

    # Modify application controller with authentication methods
    add_authentication_to_application_controller

    # User authentication controllers
    copy_file 'controllers/sessions_controller.rb', 'app/controllers/sessions_controller.rb'
    copy_file 'controllers/registrations_controller.rb', 'app/controllers/registrations_controller.rb'
    copy_file 'controllers/passwords_controller.rb', 'app/controllers/passwords_controller.rb'

    # Identity namespace controllers
    copy_file 'controllers/identity/emails_controller.rb', 'app/controllers/identity/emails_controller.rb'
    copy_file 'controllers/identity/email_verifications_controller.rb', 'app/controllers/identity/email_verifications_controller.rb'
    copy_file 'controllers/identity/password_resets_controller.rb', 'app/controllers/identity/password_resets_controller.rb'

    # Omniauth controller
    copy_file 'controllers/sessions/omniauth_controller.rb', 'app/controllers/sessions/omniauth_controller.rb'

    # Invitations controller
    copy_file 'controllers/invitations_controller.rb', 'app/controllers/invitations_controller.rb'
  end

  def create_views
    say "Creating views...", :green

    # User authentication views
    copy_file 'views/sessions/new.html.erb', 'app/views/sessions/new.html.erb'
    copy_file 'views/sessions/index.html.erb', 'app/views/sessions/index.html.erb'
    copy_file 'views/registrations/new.html.erb', 'app/views/registrations/new.html.erb'
    copy_file 'views/passwords/edit.html.erb', 'app/views/passwords/edit.html.erb'

    # Identity views
    copy_file 'views/identity/emails/edit.html.erb', 'app/views/identity/emails/edit.html.erb'
    copy_file 'views/identity/password_resets/new.html.erb', 'app/views/identity/password_resets/new.html.erb'
    copy_file 'views/identity/password_resets/edit.html.erb', 'app/views/identity/password_resets/edit.html.erb'

    # Invitations views
    copy_file 'views/invitations/new.html.erb', 'app/views/invitations/new.html.erb'
  end

  def create_mailers
    say "Creating mailers...", :green
    copy_file 'mailers/user_mailer.rb', 'app/mailers/user_mailer.rb'

    # Mailer views
    copy_file 'views/user_mailer/email_verification.html.erb', 'app/views/user_mailer/email_verification.html.erb'
    copy_file 'views/user_mailer/password_reset.html.erb', 'app/views/user_mailer/password_reset.html.erb'
    copy_file 'views/user_mailer/invitation_instructions.html.erb', 'app/views/user_mailer/invitation_instructions.html.erb'
  end

  def create_migrations
    say "Creating migrations...", :green

    # Generate timestamped migration files
    migration_template 'migrations/create_users.rb.erb', 'db/migrate/create_users.rb'
    sleep 1 # Ensure different timestamps
    migration_template 'migrations/create_sessions.rb.erb', 'db/migrate/create_sessions.rb'
  end

  def add_dependencies
    add_gems_to_gemfile
  end

  def add_routes
    say "Adding routes...", :green

    # Check if authentication routes are already present
    routes_file = File.read('config/routes.rb')
    if routes_file.include?('# Authentication routes generated by authentication generator')
      say "Authentication routes already exist, skipping...", :blue
      return
    end

    route_content = generate_routes_content

    # Insert routes at the beginning of the routes file
    inject_into_file 'config/routes.rb', after: "Rails.application.routes.draw do\n" do
      "  # Authentication routes generated by authentication generator\n" + route_content
    end
  end

  def add_omniauth_initializer
    say "Creating omniauth initializer...", :green
    copy_file 'initializers/omniauth.rb', 'config/initializers/omniauth.rb'
  end

  def add_gems_to_gemfile
    say "Adding required gems to Gemfile...", :green

    # Check if bcrypt is already in Gemfile (either active or commented)
    gemfile_content = File.read('Gemfile')

    # Handle bcrypt - uncomment if it exists as a comment, otherwise add it
    if gemfile_content.include?('# gem "bcrypt"')
      uncomment_lines 'Gemfile', /gem "bcrypt"/
    elsif !gemfile_content.include?('gem "bcrypt"') && !gemfile_content.include?("gem 'bcrypt'")
      gem 'bcrypt'
    end

    unless gemfile_content.include?('gem "omniauth"') || gemfile_content.include?("gem 'omniauth'")
      gem 'omniauth'
    end

    unless gemfile_content.include?('omniauth-rails_csrf_protection')
      gem 'omniauth-rails_csrf_protection'
    end
  end

  def show_post_install_message
    say "\n" + "="*50, :green
    say "Authentication system generated successfully!", :green
    say "="*50, :green
    say "\nNext steps:", :yellow
    say "1. Run: rails db:migrate"
    say "2. Run: bundle install (if new gems were added)"
    say "3. Configure your omniauth providers in config/initializers/omniauth.rb"
    say "4. Customize the views to match your application's styling"
    say "5. Configure your mailer settings for email verification and password reset"
    say "\nGenerated features:", :blue
    say "- User registration and authentication"
    say "- Session management"
    say "- Password management"
    say "- Email verification"
    say "- Password reset"
    say "- Omniauth integration"
    say "- User invitations"
  end

  private

  def add_authentication_to_application_controller
    # Check if authentication code is already present
    app_controller_content = File.read('app/controllers/application_controller.rb')
    if app_controller_content.include?('# Authentication methods generated by authentication generator')
      say "Authentication methods already exist in ApplicationController, skipping...", :blue
      return
    end

    # Add before_action callbacks and helper_method at the beginning of the class
    inject_into_class 'app/controllers/application_controller.rb', 'ApplicationController' do
      <<-RUBY
  # Authentication methods generated by authentication generator
  before_action :set_current_request_details

  helper_method :current_user
  # Authentication public methods generated end

      RUBY
    end

    # Add private authentication methods at the end, before the last 'end'
    gsub_file 'app/controllers/application_controller.rb', /^end\s*$/ do |match|
      <<-RUBY

  # Authentication private methods begin
  private

  def current_user
    Current.session&.user
  end

  def authenticate_user!
    if session_record = Session.find_by_id(cookies.signed[:session_token])
      Current.session = session_record
    else
      redirect_to sign_in_path
    end
  end

  alias_method :authenticate, :authenticate_user!

  def set_current_request_details
    Current.user_agent = request.user_agent
    Current.ip_address = request.ip

    if session_record = Session.find_by_id(cookies.signed[:session_token])
      Current.session = session_record
    end
  end

  def handle_password_errors(user)
    error_messages = []

    user.errors.each do |error|
      case error.attribute
      when :current_password
        error_messages << "Current password is incorrect"
      when :password
        if error.type == :too_short
          error_messages << "New password must be at least \#{User::MIN_PASSWORD} characters long"
        elsif error.type == :invalid
          error_messages << "Password format is invalid"
        else
          error_messages << "New password: \#{error.message}"
        end
      when :password_confirmation
        error_messages << "Password confirmation doesn't match"
      when :password_digest
        error_messages << "Password format is invalid"
      end
    end

    if error_messages.empty?
      error_messages = user.errors.full_messages
    end

    return error_messages.first
  end

  # Just used by registeration/authentication controller
  def _strong_root_path
    respond_to?(:root_path) ? root_path : '/'
  end
  # Authentication private methods end
#{match}
      RUBY
    end
  end

  def self.next_migration_number(dirname)
    next_migration_number = current_migration_number(dirname) + 1
    [Time.now.utc.strftime("%Y%m%d%H%M%S"), "%.14d" % next_migration_number].max
  end

  def generate_routes_content
    <<-RUBY
  get  "sign_in", to: "sessions#new"
  post "sign_in", to: "sessions#create"
  delete 'sign_in', to: 'sessions#destroy'
  get  "sign_up", to: "registrations#new"
  post "sign_up", to: "registrations#create"
  resources :sessions, only: [:index, :show, :destroy]
  resource  :password, only: [:edit, :update]

  namespace :identity do
    resource :email,              only: [:edit, :update]
    resource :email_verification, only: [:show, :create]
    resource :password_reset,     only: [:new, :edit, :create, :update]
  end

  get  "/auth/failure",            to: "sessions/omniauth#failure"
  get  "/auth/:provider/callback", to: "sessions/omniauth#create"
  post "/auth/:provider/callback", to: "sessions/omniauth#create"

  resource :invitation, only: [:new, :create]
  # Authentication routes generated end

    RUBY
  end
end
