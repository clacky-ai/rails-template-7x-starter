class ImageGenerationJob < ApplicationJob
  queue_as :image_generation

  # Retry strategy configuration
  retry_on Net::ReadTimeout, wait: 10.seconds, attempts: 3
  retry_on ImageGenerationService::TimeoutError, wait: 10.seconds, attempts: 3
  retry_on ImageGenerationService::ApiError, wait: 15.seconds, attempts: 2

  discard_on ActiveJob::DeserializationError

  # Generate images via background job to avoid blocking main process
  # Usage: ImageGenerationJob.perform_later(channel_name: "user_123", prompt: "A sunset")
  #
  # CRITICAL: ALL broadcasts MUST have 'type' field (auto-routes to client handler)
  # - type: 'image_generated' → client calls handleImageGenerated(data)
  # - type: 'error' → client calls handleError(data)
  #
  # ⚠️  DO NOT rescue exceptions here!
  # ApplicationJob handles all exceptions globally and reports them automatically.
  def perform(channel_name:, prompt:, **options)
    result = ImageGenerationService.call(prompt: prompt, **options)

    # Broadcast generated images → client handleImageGenerated(data)
    ActionCable.server.broadcast(channel_name, {
      type: 'image_generated',
      images: result[:images],
      prompt: prompt
    })

    # Note: Let exceptions bubble up to ApplicationJob for proper error handling
  end
end
