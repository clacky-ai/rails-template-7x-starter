require 'rails_helper'

RSpec.describe "Orders", type: :request do
<% if @auth -%>
  let(:user) { create(:user) }
  let!(:order) { create(:order, user: user) }

  before { sign_in_as(user) }
<% else -%>
  let!(:order) { create(:order) }
<% end -%>

  describe "GET /orders" do
    it "returns http success" do
      get orders_path
      expect(response).to be_success_with_view_check('index')
    end
  end

  describe "GET /orders/:id" do
    it "returns http success" do
      get order_path(order)
      expect(response).to be_success_with_view_check('show')
    end
  end

<% unless @for_test -%>
  describe "CLACKY_TODO validation" do
    it "validates that all CLACKY_TODOs have been resolved" do
      check_clacky_todos([
        'app/views/orders/index.html.erb',
        'app/services/stripe_payment_service.rb'
      ])
    end

    it "validates payment flow uses pay_button partial correctly" do
      violations = []

      # Check views for direct button_to pay_order_path
      Dir.glob(Rails.root.join('app/views/**/*.html.erb')).each do |file_path|
        content = File.read(file_path)
        relative_path = file_path.sub(Rails.root.to_s + '/', '')

        next if relative_path.include?('_pay_button.html.erb')

        if content.match?(/button_to.*pay_order_path/) && !content.match?(/render.*pay_button/)
          violations << {
            file: relative_path,
            issue: "Direct button_to pay_order_path instead of using pay_button partial"
          }
        end
      end

      # Check controllers for direct redirect to pay_order_path
      Dir.glob(Rails.root.join('app/controllers/**/*_controller.rb')).each do |file_path|
        content = File.read(file_path)
        relative_path = file_path.sub(Rails.root.to_s + '/', '')

        next if relative_path.include?('orders_controller.rb')

        if content.match?(/redirect_to.*pay_order_path/)
          violations << {
            file: relative_path,
            issue: "Direct redirect to pay_order_path - should redirect to order_path first"
          }
        end
      end

      if violations.any?
        error_message = "\n❌ Found #{violations.length} payment flow violation(s):\n\n"

        violations.each do |v|
          error_message += "📄 #{v[:file]}\n"
          error_message += "   Issue: #{v[:issue]}\n"
          if v[:file].include?('views/')
            error_message += "   Fix: Use <%%%= render 'orders/pay_button', order: @order %>\n\n"
          else
            error_message += "   Fix: redirect_to order_path(@order) then let user click Pay button\n\n"
          end
        end

        error_message += "Correct flow:\n"
        error_message += "  1. Create order in controller: @order = Order.create!(...)\n"
        error_message += "  2. Redirect to order show: redirect_to order_path(@order)\n"
        error_message += "  3. Show page displays order details + pay_button partial\n"
        error_message += "  4. User clicks 'Pay Now' → triggers pay_order_path\n"

        fail error_message
      end
    end
  end
<% end -%>
end
