class ImageGenerationJob < ApplicationJob
  queue_as :image_generation

  # Retry strategy configuration
  retry_on Net::ReadTimeout, wait: 10.seconds, attempts: 3
  retry_on ImageGenerationService::TimeoutError, wait: 10.seconds, attempts: 3
  retry_on ImageGenerationService::ApiError, wait: 15.seconds, attempts: 2

  discard_on ActiveJob::DeserializationError

  # Generate images via background job to avoid blocking main process
  # Usage (Turbo Streams):
  #   ImageGenerationJob.perform_later(stream: "images_#{user_id}", prompt: "A sunset")
  # Frontend 订阅对应的 Turbo Streams：
  #   <turbo-cable-stream-source channel="Turbo::StreamsChannel" signed-stream-name="<%= Turbo::StreamsChannel.signed_stream_name("images_#{current_user.id}") %>"></turbo-cable-stream-source>
  #
  # ⚠️  DO NOT rescue exceptions here!
  # ApplicationJob handles all exceptions globally and reports them automatically.
  def perform(stream:, prompt:, **options)
    result = ImageGenerationService.call(prompt: prompt, **options)

    # 使用 Turbo Streams 推送生成结果，采用自定义 action，前端据此处理 UI 更新
    Turbo::StreamsChannel.broadcast_render_to(
      stream,
      inline: "<turbo-stream action='image_generated' data-images='<%= images.to_json.gsub(\"'\", \"&#39;\") %>' data-prompt='<%= prompt %>'></turbo-stream>",
      locals: { images: result[:images], prompt: prompt }
    )
  end
end
